<?xml version="1.0" encoding="utf-8"?>
<s:Scroller xmlns:fx="http://ns.adobe.com/mxml/2009"
			xmlns:s="library://ns.adobe.com/flex/spark"
			xmlns:mx="library://ns.adobe.com/flex/mx"
			xmlns:components="components.*">


	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import components.PopTipificacion;
			import components.PopupCategorias;
			
			import controller.Controller;
			
			import event.MantenedoresEvent;
			
			import flash.profiler.showRedrawRegions;
			
			import model.ModelApp;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.GridEvent;
			
			import vo.CategoriaVO;
			import vo.ClasificacionVO;
			import vo.DescripcionVO;
			import vo.SubCategoriaVO;
			[Bindable] public var modelApp:ModelApp = ModelApp.getInstance();
			[Bindable] private var clasificacionVO:ClasificacionVO = new ClasificacionVO();
			private var test:String = '';
			protected function fnBuscarAsociados(evento:GridEvent):void
			{
				// TODO Auto-generated method stub
				trace('fnBuscarAsociados');
				if(evento.rowIndex > -1){
					var manEvent:MantenedoresEvent;
					switch(evento.currentTarget){
						case dgClasificacion:
							manEvent = new MantenedoresEvent(MantenedoresEvent.BUSCA_CATEGORIAS_ASOCIADAS, fnActualizaData, {idClas: dgClasificacion.selectedItem});
							Controller.getInstance().dispatchEvent(manEvent);		
							break;
						case dgCategorias:
							manEvent = new MantenedoresEvent(MantenedoresEvent.BUSCA_SUBCATEGORIAS_ASOCIADAS, fnActualizaData, {idClas: dgClasificacion.selectedItem.idClasificacion, idCategoria: dgCategorias.selectedItem});
							Controller.getInstance().dispatchEvent(manEvent);		
							break;
						case dgSubCategorias:
							manEvent = new MantenedoresEvent(MantenedoresEvent.BUSCA_PROBLEMAS_ASOCIADOS, fnActualizaData, {idClas: dgClasificacion.selectedItem.idClasificacion, idCategoria: dgCategorias.selectedItem.obj.idCategoria, idSubCategoria: dgSubCategorias.selectedItem});
							Controller.getInstance().dispatchEvent(manEvent);		
							break;
						
					}
					
					
				}
				
			}
			
			
			private function fnActualizaGrilla(item:*, opt:String):void{
				var aux:*;
				switch(opt){
					case ModelApp.CLASIFICACION:
						aux = dgClasificacion.selectedItem as ClasificacionVO;
						aux.nombreClasificacion = item.nombreClasificacion;
						break;
					case ModelApp.CATEGORIA:
						aux = dgCategorias.selectedItem.obj as CategoriaVO;
						aux.nombreCategoria = item.nombreCategoria;		
						dgClasificacion.selectedItem.arrAsociadosIn.refresh();
						break;
					case ModelApp.SUBCATEGORIA:
						aux = dgSubCategorias.selectedItem.obj as SubCategoriaVO;
						aux.nombreSubCategoria = item.nombreSubCategoria;
						dgCategorias.selectedItem.obj.arrAsociadosIn.refresh();
						break;
					case ModelApp.PROBLEMA:
						aux = dgProblemas.selectedItem.obj as DescripcionVO;
						aux.nombreDescripcion = item.nombreDescripcion;
						aux.idFormaAtencion = item.idFormaAtencion;
						aux.idTiempoSolucion = item.idTiempoSolucion;
						dgSubCategorias.selectedItem.obj.arrAsociadosIn.refresh();
						break;
				}
				 
			}
			
			private function fnActualizaData(auxNuevoVO:*):void{				
				/*clasificacionVO.idClasificacion = auxNuevoVO.idClasificacion; 
				clasificacionVO.nombreClasificacion = auxNuevoVO.nombreClasificacion;
				clasificacionVO.arrCategoriasIn = auxNuevoVO.arrCategoriasIn;
				clasificacionVO.arrCategoriasOut = auxNuevoVO.arrCategoriasOut;*/
				auxNuevoVO.arrAsociadosIn.refresh();
				auxNuevoVO.arrAsociadosOut.refresh();
			}
			
			protected function fnPopCategorias(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var pop:PopupCategorias = new PopupCategorias();
				pop.clasificacionVO = ClasificacionVO(dgClasificacion.selectedItem);
				pop.fnActualizaData = fnActualizaData;
				PopUpManager.addPopUp(pop, this.parentApplication as CAU, true);
				PopUpManager.centerPopUp(pop);
			}
			
			
			
			
			
			protected function fnEliminarNoSeleccionadas(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var arr:Array = [];
				for each(var obj:Object in clasificacionVO.arrAsociadosIn){
					if(obj.sel == false){
						arr.push(obj['obj']['idCategoria']);	
					}
					
				}
				
				var manEvent:MantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.ELIMINAR_CLASIFICACION_CATEGORIAS, fnActualizaData, [dgClasificacion.selectedItem, arr]);
				Controller.getInstance().dispatchEvent(manEvent);	
			}
			
			protected function fnNuevaClasificacion(event:*):void
			{
				// TODO Auto-generated method stub				
				clasificacionVO = new ClasificacionVO();
				dgClasificacion.selectedItem = null;
				modelApp.arrClasificacion.refresh();
				//btnEnviar.label = 'Crear';
			}
			
			protected function fnNuevaCategoria(event:*):void
			{
				// TODO Auto-generated method stub				
				/*var categoriaVO:CategoriaVO = new CategoriaVO();
				dgCategorias.selectedItem = null;
				modelApp.arrCategoria.refresh();*/
				
				//Alert.show('Deseas incluir esta nueva categoría la clasificación actual', 'Atención', Alert.OK|Alert.NO, null, fnIncluirCategoria);
				dgClasificacion.dispatchEvent(new GridEvent(GridEvent.GRID_CLICK,false,false, NaN, NaN,null,false, false, false, false, 0, dgClasificacion.selectedIndex));
				/*if(dgClasificacion.selectedItem){
					fnBuscarAsociados(new GridEvent(GridEvent.GRID_CLICK,false,false, NaN, NaN,null,false, false, false, false, 0, dgClasificacion.selectedIndex));
					ClasificacionVO(dgClasificacion.selectedItem).arrAsociadosIn.refresh();
				}*/
				
				//btnEnviar.label = 'Crear';
			}
			
			protected function fnIncluirCategoria(evento:CloseEvent):void{
				if(evento.detail == Alert.OK){
					
				}
			}
			
			
			protected function fnNuevaSubcategoria(event:*):void
			{
				// TODO Auto-generated method stub				
				/*var subcategoriaVO:SubCategoriaVO = new SubCategoriaVO();
				dgSubCategorias.selectedItem = null;
				modelApp.arrSubCategoria.refresh();*/
				dgCategorias.dispatchEvent(new GridEvent(GridEvent.GRID_CLICK,false,false, NaN, NaN,null,false, false, false, false, 0, dgCategorias.selectedIndex));
				
				
				//btnEnviar.label = 'Crear';
			}
			
			
			protected function fnNuevoProblema(event:*):void
			{
				// TODO Auto-generated method stub				
				dgSubCategorias.dispatchEvent(new GridEvent(GridEvent.GRID_CLICK,false,false, NaN, NaN,null,false, false, false, false, 0, dgSubCategorias.selectedIndex));
			}
			
			/*private function set fnIdClas(val:int):void{
				idLbl.text = val + '';	
			}*/
			
			
			/*protected function fnOperarClasificacion(evento:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var mantenedoresEvent:MantenedoresEvent;
				switch(evento.target){
					case btnEnviar:
						if(btnEnviar.label == 'Crear'){
							
							mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.CREAR_CLASIFICACION, fnNuevaClasificacion, [clasificacionVO, modelApp.arrClasificacion]);						
						} else {
							mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.MODIFICAR_CLASIFICACION, fnActualizaGrilla, [clasificacionVO, modelApp.arrClasificacion]);
						}
						
						break;
					case btnEliminar:
						mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.ELIMINAR_CLASIFICACION, fnRemueveGrilla, [dgClasificacion.selectedItem, modelApp.arrClasificacion]);
						
						break;
				}
				
				Controller.getInstance().dispatchEvent(mantenedoresEvent);
			}*/	
			
			private function fnRemueveGrilla(id:String, opt:String):void{
				var manEvent:MantenedoresEvent;
				switch(opt){
					case ModelApp.CLASIFICACION:
						var auxClasificacionVO:ClasificacionVO = dgClasificacion.selectedItem as ClasificacionVO;
						auxClasificacionVO.arrAsociadosIn = null;
						auxClasificacionVO.arrAsociadosOut = null;
						modelApp.arrClasificacion.removeItemAt(modelApp.arrClasificacion.getItemIndex(auxClasificacionVO));
						delete modelApp.objClasificacion[id];
						break;
					case ModelApp.CATEGORIA:
						
						var auxCatVO:CategoriaVO = dgCategorias.selectedItem['obj'] as CategoriaVO;
						auxCatVO.arrAsociadosIn = null;
						auxCatVO.arrAsociadosOut = null;
						modelApp.arrCategoria.removeItemAt(modelApp.arrCategoria.getItemIndex(auxCatVO));
						delete modelApp.objCategoria[id];
						manEvent = new MantenedoresEvent(MantenedoresEvent.BUSCA_CATEGORIAS_ASOCIADAS, fnActualizaData, {idClas: dgClasificacion.selectedItem});
						Controller.getInstance().dispatchEvent(manEvent);
						break;
					case ModelApp.SUBCATEGORIA:
						dgCategorias.dispatchEvent(new GridEvent(GridEvent.GRID_CLICK,false,false, NaN, NaN,null,false, false, false, false, 0, dgCategorias.selectedIndex));
						var auxSubVO:SubCategoriaVO = dgSubCategorias.selectedItem['obj'] as SubCategoriaVO;
						auxSubVO.arrAsociadosIn = null;
						auxSubVO.arrAsociadosOut = null;
						modelApp.arrSubCategoria.removeItemAt(modelApp.arrSubCategoria.getItemIndex(auxSubVO));
						delete modelApp.objSubCategoria[id];
						manEvent = new MantenedoresEvent(MantenedoresEvent.BUSCA_SUBCATEGORIAS_ASOCIADAS, fnActualizaData, {idClas: dgClasificacion.selectedItem.idClasificacion, idCategoria: dgCategorias.selectedItem});
						Controller.getInstance().dispatchEvent(manEvent);		
						break;
					case ModelApp.PROBLEMA:
						dgSubCategorias.dispatchEvent(new GridEvent(GridEvent.GRID_CLICK,false,false, NaN, NaN,null,false, false, false, false, 0, dgSubCategorias.selectedIndex));
						var auxProbVO:DescripcionVO = dgProblemas.selectedItem['obj'] as DescripcionVO;
						modelApp.arrDescripcion.removeItemAt(modelApp.arrDescripcion.getItemIndex(auxProbVO));
						delete modelApp.objDescripcion[id];
						manEvent = new MantenedoresEvent(MantenedoresEvent.BUSCA_PROBLEMAS_ASOCIADOS, fnActualizaData, {idClas: dgClasificacion.selectedItem.idClasificacion, idCategoria: dgCategorias.selectedItem.obj.idCategoria, idSubCategoria: dgSubCategorias.selectedItem});
						Controller.getInstance().dispatchEvent(manEvent);		
						
						break;
						
				}
				
				//fnNuevaClasificacion(null);
			}
			
			private var optDelete:String;
			private function fnEliminacion(opt:String):void{
				optDelete = opt;
				switch(opt){
					case ModelApp.CLASIFICACION:
						Alert.show('Esta acción eliminará la clasificación y todo lo relacionado con esta. ¿Está seguro que desea continuar?', 'Atención', Alert.OK|Alert.NO, null, fnElimina);
						break;
					case ModelApp.CATEGORIA:
						Alert.show('Esta acción eliminará la categoría y todo lo relacionado con esta. ¿Está seguro que desea continuar?', 'Atención', Alert.OK|Alert.NO, null, fnElimina);
						break;
					case ModelApp.SUBCATEGORIA:
						Alert.show('Esta acción eliminará la subcategoría y todo lo relacionado con esta. ¿Está seguro que desea continuar?', 'Atención', Alert.OK|Alert.NO, null, fnElimina);
						break;
					case ModelApp.PROBLEMA:
						Alert.show('Esta acción eliminará el problema y todo lo relacionado con esta. ¿Está seguro que desea continuar?', 'Atención', Alert.OK|Alert.NO, null, fnElimina);
						break;
				}
				optDelete = opt;
			}
			
			private function fnElimina(evento:CloseEvent):void{
				if(evento.detail == Alert.OK){
					var mantenedoresEvent:MantenedoresEvent;
					switch(optDelete){
						case ModelApp.CLASIFICACION:
							mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.ELIMINAR_CLASIFICACION, fnRemueveGrilla, [dgClasificacion.selectedItem, modelApp.arrClasificacion]);
							break;
						case ModelApp.CATEGORIA:
							mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.ELIMINAR_CATEGORIA, fnRemueveGrilla, [dgCategorias.selectedItem, modelApp.arrCategoria]);
							break;
						case ModelApp.SUBCATEGORIA:
							mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.ELIMINAR_SUBCATEGORIAS, fnRemueveGrilla, [dgSubCategorias.selectedItem, modelApp.arrSubCategoria]);
							break;
						case ModelApp.PROBLEMA:
							mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.ELIMINAR_PROBLEMAS, fnRemueveGrilla, [dgProblemas.selectedItem, modelApp.arrDescripcion]);
							break;
					}
					
					Controller.getInstance().dispatchEvent(mantenedoresEvent);
				}
			}
			
			private function fnFormaAtencion(item:Object, column:*):String{
				return modelApp.objFormaAtencion[item.obj.idFormaAtencion]['descripcion'];
			}
			
			private function fnTiempoSolucion(item:Object, column:*):String{
				return modelApp.objTiempoSolucion[item.obj.idTiempoSolucion]['descripcion'];
			}			
			
			private function fnPopTipificacion(evento:MouseEvent):void{
				var pop:PopTipificacion = new PopTipificacion();
				var sw:Boolean;
				switch(evento.target.id){
					case 'btnCrearClasificacion' || 'btnModificarClasificacion':						
						pop.opcion = evento.target.label; 
						pop.ext2 = false;
						
						if(evento.target.label != 'Crear'){
							if(dgClasificacion.selectedIndex > -1){
								pop.title = 'Modificar Clasificación';
								pop.obj = dgClasificacion.selectedItem;
								pop.tipoEvento = MantenedoresEvent.MODIFICAR_CLASIFICACION;
								pop.fnPost = fnActualizaGrilla;
								
								sw = true;
							} else {
								Alert.show('Debe Seleccionar Clasificación a modificar');
							}
							
						} else {
							pop.title = 'Crear Clasificación';
							pop.tipoEvento = MantenedoresEvent.CREAR_CLASIFICACION;
							pop.fnPost = fnNuevaClasificacion;
							
							sw = true;
						}
						if(sw){
							
							//pop.arr = modelApp.arrClasificacion;
							pop.campo1 = 'nombreClasificacion';
							pop.claseOperacion = ClasificacionVO;
							
							PopUpManager.addPopUp(pop, CAU(this.parentApplication), true);
							PopUpManager.centerPopUp(pop);
						}
						break;
					
					case 'btnCrearCategoria' || 'btnModificarCategoria':						
						pop.opcion = evento.target.label; 
						
						if(evento.target.label != 'Crear'){
							if(dgCategorias.selectedIndex > -1){
								pop.ext2 = false;
								pop.title = 'Modificar Categoría';
								pop.obj = dgCategorias.selectedItem.obj;
								pop.tipoEvento = MantenedoresEvent.MODIFICAR_CATEGORIA;
								pop.fnPost = fnActualizaGrilla;
								sw = true;
							} else {
								Alert.show('Debe Seleccionar Categoría a modificar');
							}
							
						} else {
							pop.title = 'Crear Categoría';
							pop.tipoEvento = MantenedoresEvent.CREAR_CATEGORIA;
							pop.fnPost = fnNuevaCategoria;
							pop.dgDataProvider = modelApp.arrClasificacion;
							pop.campoVisible = 'nombreClasificacion';
							pop.idCampoVisible = 'idClasificacion';
							sw = true;
						}
						
						if(sw){
							
							//pop.arr = modelApp.arrCategoria;
							pop.campo1 = 'nombreCategoria';
							pop.claseOperacion = CategoriaVO;
							
							PopUpManager.addPopUp(pop, CAU(this.parentApplication), true);
							PopUpManager.centerPopUp(pop);	
						}
						
						break;
					
					case 'btnCrearSubCategoria' || 'btnModificarSubCategoria':						
						pop.opcion = evento.target.label; 
						
						if(evento.target.label != 'Crear'){
							if(dgSubCategorias.selectedIndex > -1){
								pop.ext2 = false;
								pop.title = 'Modificar Subcategoría';
								pop.obj = dgSubCategorias.selectedItem.obj;
								pop.tipoEvento = MantenedoresEvent.MODIFICAR_SUBCATEGORIAS;
								pop.fnPost = fnActualizaGrilla;
								sw = true;
							} else {
								Alert.show('Debe Seleccionar Subcategoría a modificar');
							}
							
						} else {
							pop.idClas = '' + dgClasificacion.selectedItem['idClasificacion'];
							pop.title = 'Crear Subcategoría';
							pop.tipoEvento = MantenedoresEvent.CREAR_SUBCATEGORIAS;
							pop.fnPost = fnNuevaSubcategoria;
							pop.dgDataProvider = modelApp.arrCategoria;
							pop.campoVisible = 'nombreCategoria';
							pop.idCampoVisible = 'idCategoria';
							sw = true;
						}
						
						if(sw){
							
							//pop.arr = modelApp.arrSubCategoria;
							pop.campo1 = 'nombreSubCategoria';
							pop.claseOperacion = SubCategoriaVO;
							
							PopUpManager.addPopUp(pop, CAU(this.parentApplication), true);
							PopUpManager.centerPopUp(pop);	
						}
						
						break;
					
					case 'btnCrearProblemas' || 'btnModificarProblema':						
						pop.opcion = evento.target.label; 
						
						pop.ext = true;
						if(evento.target.label != 'Crear'){
							if(dgProblemas.selectedIndex > -1){
								pop.ext2 = false;
								pop.title = 'Modificar Problema';
								pop.obj = dgProblemas.selectedItem.obj;
								pop.tipoEvento = MantenedoresEvent.MODIFICAR_PROBLEMAS;
								pop.fnPost = fnActualizaGrilla;
								sw = true;
							} else {
								Alert.show('Debe Seleccionar Problema a modificar');
							}
							
						} else {
							pop.idClas = '' + dgClasificacion.selectedItem['idClasificacion'];
							pop.idCat = '' + dgCategorias.selectedItem['obj']['idCategoria'];
							pop.title = 'Crear Problema';
							pop.tipoEvento = MantenedoresEvent.CREAR_PROBLEMAS;
							pop.fnPost = fnNuevoProblema;
							pop.dgDataProvider = modelApp.arrSubCategoria;
							pop.campoVisible = 'nombreSubCategoria';
							pop.idCampoVisible = 'idSubCategoria';
							sw = true;
						}
						if(sw){
							
							//pop.arr = modelApp.arrDescripcion;
							pop.campo1 = 'nombreDescripcion';
							pop.claseOperacion = DescripcionVO;
							
							PopUpManager.addPopUp(pop, CAU(this.parentApplication), true);
							PopUpManager.centerPopUp(pop);	
						}
						break;
				}
				
				
			}
			
		]]>
	</fx:Script>
	<!--<fx:Binding source="clasificacionVO.idClasificacion" destination="fnIdClas"/>-->
	<!--<fx:Binding source="txtNombre.text" destination="clasificacionVO.nombreClasificacion" twoWay="true"/>-->
	<s:Group width="100%" height="100%">
		<s:VGroup width="100%" height="100%" paddingBottom="30">
			<s:HGroup gap="15" width="100%" height="40%">
				<!--<components:CustomPanelSpark skinClass="assets.skins.CustomPanelBlancoSkin" title="{dgClasificacion.selectedIndex > -1 ? 'Actualizar Id: ' + clasificacionVO.idClasificacion : 'Nuevo'}" width="40%"  height="220">
					<s:Form defaultButton="{btnEnviar}" width="100%">
						<s:FormItem label="Nombre" width="100%" height="30">
							<s:TextInput id="txtNombre" height="30" width="150"/>
						</s:FormItem>
						<s:FormItem width="100%" height="30">
							<s:Button id="btnEnviar" label="{clasificacionVO.idClasificacion == 0 ? 'Crear' : 'Actualizar'}" click="fnOperarClasificacion(event)" skinClass="assets.skins.CustomButtonEnviar" width="150" height="30"/>	
						</s:FormItem>
						<s:FormItem width="100%" height="30">
							<s:Button id="btnNuevo" label="Nueva Clasificación" click="fnNuevaClasificacion(event)" skinClass="assets.skins.CustomButtonTransparenteSkin" width="150" height="30"/>	
						</s:FormItem>
						<s:FormItem width="100%" height="30">
							<s:Button id="btnEliminar" label="Eliminar" click="fnOperarClasificacion(event)" skinClass="assets.skins.CustomButtonTransparenteSkin" width="150" height="30"/>	
						</s:FormItem>
					</s:Form>	
				</components:CustomPanelSpark>-->
				
				<components:CustomPanelSpark id="cpClasificacion" title="Clasificación" width="100%"  height="100%">
					<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="5">
						<s:HGroup width="100%">
							<s:Button id="btnCrearClasificacion" label="Crear" click="fnPopTipificacion(event)" width="100%"/>
							<s:Button id="btnModificarClasificacion" label="Modificar" click="fnPopTipificacion(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Eliminar" click="fnEliminacion(ModelApp.CLASIFICACION)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Agregar Categoría" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							
						</s:HGroup>
						<s:DataGrid id="dgClasificacion" dataProvider="{modelApp.arrClasificacion}" gridClick="fnBuscarAsociados(event)" width="100%" height="100%">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="idClasificacion" headerText="Id"/>
									<s:GridColumn dataField="nombreClasificacion" headerText="Nombre"/>	
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:VGroup> 	
				</components:CustomPanelSpark>
				<components:CustomPanelSpark id="cpAsociados" title="Categorias" width="100%">
					<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="5">
						<s:HGroup width="100%">
							<s:Button id="btnCrearCategoria" label="Crear" click="fnPopTipificacion(event)" width="100%"/>
							<s:Button id="btnModificarCategoria" label="Modificar" click="fnPopTipificacion(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Eliminar" click="fnEliminacion(ModelApp.CATEGORIA)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Agregar Subcategoría" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							
						</s:HGroup>
						<s:DataGrid id="dgCategorias" dataProvider="{dgClasificacion.selectedItem.arrAsociadosIn}" width="100%" height="100%" gridClick="fnBuscarAsociados(event)">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="obj.nombreCategoria" headerText="Nombre"/>
									<s:GridColumn dataField="sel" rendererIsEditable="true" headerText="Sel" itemRenderer="components.RenderSel" width="30"/>	
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
						
						
						
					</s:VGroup>
				</components:CustomPanelSpark>	
			</s:HGroup>
			<s:HGroup gap="15" width="100%" height="40%">
				<components:CustomPanelSpark title="Subcategorias" width="100%"  height="100%">
					<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="5">
						<s:HGroup width="100%">
							<s:Button id="btnCrearSubCategoria" label="Crear" click="fnPopTipificacion(event)" width="100%"/>
							<s:Button id="btnModificarSubCategoria" label="Modificar" click="fnPopTipificacion(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Eliminar" click="fnEliminacion(ModelApp.SUBCATEGORIA)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Agregar Problema" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							
						</s:HGroup>
						
						<s:DataGrid id="dgSubCategorias" dataProvider="{dgCategorias.selectedItem.obj.arrAsociadosIn}" gridClick="fnBuscarAsociados(event)" width="100%" height="100%">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="obj.idSubCategoria" headerText="Id"/>
									<s:GridColumn dataField="obj.nombreSubCategoria" headerText="Nombre"/>	
									<s:GridColumn dataField="sel" rendererIsEditable="true" headerText="Sel" itemRenderer="components.RenderSel" width="30"/>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:VGroup> 	
				</components:CustomPanelSpark>
				<components:CustomPanelSpark title="Problemas" width="100%">
					<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="5">
						<s:HGroup width="75%">
							<s:Button id="btnCrearProblemas" label="Crear" click="fnPopTipificacion(event)" width="100%"/>
							<s:Button id="btnModificarProblema" label="Modificar" click="fnPopTipificacion(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Eliminar" click="fnEliminacion(ModelApp.PROBLEMA)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							
						</s:HGroup>
						
						<s:HGroup width="100%">
							<s:Button label="Agregar Categorias" click="fnPopCategorias(event)" width="100%"/>
							<s:Button label="Eliminar no seleccionadas" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							
						</s:HGroup>
						<s:DataGrid id="dgProblemas" dataProvider="{dgSubCategorias.selectedItem.obj.arrAsociadosIn}" width="100%" height="100%">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="obj.idDescripcion" headerText="Id"/>
									<s:GridColumn dataField="obj.nombreDescripcion" headerText="Nombre"/>
									<s:GridColumn dataField="obj.idFormaAtencion" headerText="Forma Atención" labelFunction="fnFormaAtencion"/>
									<s:GridColumn dataField="obj.idTiemposolucion" headerText="Tiempo Solución" labelFunction="fnTiempoSolucion"/>
									<s:GridColumn dataField="sel" rendererIsEditable="true" headerText="Sel" itemRenderer="components.RenderSel" width="30"/>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
						
						
						
					</s:VGroup>
				</components:CustomPanelSpark>	
			</s:HGroup>
		</s:VGroup>	
	</s:Group>	
	
	
</s:Scroller>
