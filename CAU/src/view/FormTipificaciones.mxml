<?xml version="1.0" encoding="utf-8"?>
<s:Scroller xmlns:fx="http://ns.adobe.com/mxml/2009"
			xmlns:s="library://ns.adobe.com/flex/spark"
			xmlns:mx="library://ns.adobe.com/flex/mx"
			xmlns:components="components.*">


	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import components.PopTipificacion;
			import components.PopupCategorias;
			
			import controller.Controller;
			
			import event.MantenedoresEvent;
			
			import model.ModelApp;
			
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			
			import spark.events.GridEvent;
			
			import vo.CategoriaVO;
			import vo.ClasificacionVO;
			import vo.DescripcionVO;
			import vo.SubCategoriaVO;
			[Bindable] private var modelApp:ModelApp = ModelApp.getInstance();
			[Bindable] private var clasificacionVO:ClasificacionVO = new ClasificacionVO();
			protected function fnBuscarAsociados(evento:GridEvent):void
			{
				// TODO Auto-generated method stub
				if(evento.rowIndex > -1){
					var manEvent:MantenedoresEvent;
					switch(evento.currentTarget){
						case dgClasificacion:
							manEvent = new MantenedoresEvent(MantenedoresEvent.BUSCA_CATEGORIAS_ASOCIADAS, fnActualizaData, {idClas: dgClasificacion.selectedItem});
							Controller.getInstance().dispatchEvent(manEvent);		
							break;
						case lstCategorias:
							manEvent = new MantenedoresEvent(MantenedoresEvent.BUSCA_SUBCATEGORIAS_ASOCIADAS, fnActualizaData, {idClas: dgClasificacion.selectedItem.idClasificacion, idCategoria: lstCategorias.selectedItem});
							Controller.getInstance().dispatchEvent(manEvent);		
							break;
						case dgSubCategorias:
							manEvent = new MantenedoresEvent(MantenedoresEvent.BUSCA_PROBLEMAS_ASOCIADOS, fnActualizaData, {idClas: dgClasificacion.selectedItem.idClasificacion, idCategoria: lstCategorias.selectedItem.idCategoria, idSubCategoria: dgSubCategorias.selectedItem});
							Controller.getInstance().dispatchEvent(manEvent);		
							break;
						
					}
					
					
				}
				
			}
			
			
			private function fnActualizaGrilla(item:*):void{
				var auxClasificacion:ClasificacionVO = dgClasificacion.selectedItem as ClasificacionVO;
				auxClasificacion.NombreClasificacion = item.NombreClasificacion;
			}
			
			private function fnActualizaData(auxNuevoVO:*):void{				
				/*clasificacionVO.idClasificacion = auxNuevoVO.idClasificacion; 
				clasificacionVO.NombreClasificacion = auxNuevoVO.NombreClasificacion;
				clasificacionVO.arrCategoriasIn = auxNuevoVO.arrCategoriasIn;
				clasificacionVO.arrCategoriasOut = auxNuevoVO.arrCategoriasOut;*/
				auxNuevoVO.arrAsociadosIn.refresh();
				auxNuevoVO.arrAsociadosOut.refresh();
			}
			
			protected function fnPopCategorias(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var pop:PopupCategorias = new PopupCategorias();
				pop.clasificacionVO = ClasificacionVO(dgClasificacion.selectedItem);
				pop.fnActualizaData = fnActualizaData;
				PopUpManager.addPopUp(pop, this.parentApplication as CAU, true);
				PopUpManager.centerPopUp(pop);
			}
			
			protected function fnEliminarNoSeleccionadas(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var arr:Array = [];
				for each(var obj:Object in clasificacionVO.arrAsociadosIn){
					if(obj.sel == false){
						arr.push(obj['obj']['idCategoria']);	
					}
					
				}
				
				var manEvent:MantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.ELIMINAR_CLASIFICACION_CATEGORIAS, fnActualizaData, [dgClasificacion.selectedItem, arr]);
				Controller.getInstance().dispatchEvent(manEvent);	
			}
			
			protected function fnNuevaClasificacion(event:*):void
			{
				// TODO Auto-generated method stub				
				clasificacionVO = new ClasificacionVO();
				dgClasificacion.selectedItem = null;
				modelApp.arrClasificacion.refresh();
				//btnEnviar.label = 'Crear';
			}
			
			protected function fnNuevaCategoria(event:*):void
			{
				// TODO Auto-generated method stub				
				var categoriaVO:CategoriaVO = new CategoriaVO();
				lstCategorias.selectedItem = null;
				modelApp.arrCategoria.refresh();
				//btnEnviar.label = 'Crear';
			}
			
			
			protected function fnNuevaSubcategoria(event:*):void
			{
				// TODO Auto-generated method stub				
				var subcategoriaVO:SubCategoriaVO = new SubCategoriaVO();
				dgSubCategorias.selectedItem = null;
				modelApp.arrSubCategoria.refresh();
				//btnEnviar.label = 'Crear';
			}
			
			
			protected function fnNuevoProblema(event:*):void
			{
				// TODO Auto-generated method stub				
				var descripcionVO:DescripcionVO = new DescripcionVO();
				dgClasificacion.selectedItem = null;
				modelApp.arrDescripcion.refresh();
				//btnEnviar.label = 'Crear';
			}
			
			/*private function set fnIdClas(val:int):void{
				idLbl.text = val + '';	
			}*/
			
			
			/*protected function fnOperarClasificacion(evento:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var mantenedoresEvent:MantenedoresEvent;
				switch(evento.target){
					case btnEnviar:
						if(btnEnviar.label == 'Crear'){
							
							mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.CREAR_CLASIFICACION, fnNuevaClasificacion, [clasificacionVO, modelApp.arrClasificacion]);						
						} else {
							mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.MODIFICAR_CLASIFICACION, fnActualizaGrilla, [clasificacionVO, modelApp.arrClasificacion]);
						}
						
						break;
					case btnEliminar:
						mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.ELIMINAR_CLASIFICACION, fnRemueveGrilla, [dgClasificacion.selectedItem, modelApp.arrClasificacion]);
						
						break;
				}
				
				Controller.getInstance().dispatchEvent(mantenedoresEvent);
			}*/	
			
			private function fnRemueveGrilla(id:String):void{
				var auxClasificacionVO:ClasificacionVO = dgClasificacion.selectedItem as ClasificacionVO;
				auxClasificacionVO.arrAsociadosIn = null;
				auxClasificacionVO.arrAsociadosOut = null;
				modelApp.arrClasificacion.removeItemAt(modelApp.arrClasificacion.getItemIndex(auxClasificacionVO));
				//fnNuevaClasificacion(null);
			}
			
			private function fnPopTipificacion(evento:MouseEvent):void{
				var pop:PopTipificacion = new PopTipificacion();
				switch(evento.target.id){
					case 'btnCrearClasificacion':						
						pop.opcion = evento.target.label; 
						pop.title = 'Crear Clasificación';
						if(evento.target.label != 'Crear'){
							pop.obj = dgClasificacion.selectedItem;
							pop.tipoEvento = MantenedoresEvent.MODIFICAR_CLASIFICACION;
						} else {
							pop.tipoEvento = MantenedoresEvent.CREAR_CLASIFICACION;
						}
						pop.fnPost = fnNuevaClasificacion;
						//pop.opcion = ''
						//pop.idOpt = ''
						pop.arr = modelApp.arrClasificacion;
						pop.campo1 = 'NombreClasificacion';
						pop.claseOperacion = ClasificacionVO;
						
						PopUpManager.addPopUp(pop, CAU(this.parentApplication), true);
						PopUpManager.centerPopUp(pop);
						break;
					
					case 'btnCrearCategoria':						
						pop.opcion = evento.target.label; 
						pop.title = 'Crear Categoría';
						if(evento.target.label != 'Crear'){
							pop.obj = lstCategorias.selectedItem;
							pop.tipoEvento = MantenedoresEvent.MODIFICAR_CATEGORIA;
						} else {
							pop.tipoEvento = MantenedoresEvent.CREAR_CATEGORIA;
						}
						pop.fnPost = fnNuevaCategoria;
						//pop.opcion = ''
						//pop.idOpt = ''
						pop.arr = modelApp.arrCategoria;
						pop.campo1 = 'NombreCategoria';
						pop.claseOperacion = CategoriaVO;
						
						PopUpManager.addPopUp(pop, CAU(this.parentApplication), true);
						PopUpManager.centerPopUp(pop);
						break;
					
					case 'btnCrearSubCategoria':						
						pop.opcion = evento.target.label; 
						pop.title = 'Crear Subcategoría';
						if(evento.target.label != 'Crear'){
							pop.obj = dgSubCategorias.selectedItem;
							pop.tipoEvento = MantenedoresEvent.MODIFICAR_SUBCATEGORIAS;
						} else {
							pop.tipoEvento = MantenedoresEvent.CREAR_SUBCATEGORIAS;
						}
						pop.fnPost = fnNuevaSubcategoria;
						//pop.opcion = ''
						//pop.idOpt = ''
						pop.arr = modelApp.arrSubCategoria;
						pop.campo1 = 'nombreSubCategoria';
						pop.claseOperacion = SubCategoriaVO;
						
						PopUpManager.addPopUp(pop, CAU(this.parentApplication), true);
						PopUpManager.centerPopUp(pop);
						break;
					
					case 'btnCrearProblemas':						
						pop.opcion = evento.target.label; 
						pop.title = 'Crear Problema';
						pop.ext = true;
						if(evento.target.label != 'Crear'){
							pop.obj = lstProblemas.selectedItem;
							pop.tipoEvento = MantenedoresEvent.MODIFICAR_PROBLEMAS;
						} else {
							pop.tipoEvento = MantenedoresEvent.CREAR_PROBLEMAS;
						}
						pop.fnPost = fnNuevoProblema;
						//pop.opcion = ''
						//pop.idOpt = ''
						pop.arr = modelApp.arrDescripcion;
						pop.campo1 = 'nombreDescripcion';
						pop.claseOperacion = DescripcionVO;
						
						PopUpManager.addPopUp(pop, CAU(this.parentApplication), true);
						PopUpManager.centerPopUp(pop);
						break;
				}
				
				
			}
			
		]]>
	</fx:Script>
	<!--<fx:Binding source="clasificacionVO.idClasificacion" destination="fnIdClas"/>-->
	<!--<fx:Binding source="txtNombre.text" destination="clasificacionVO.NombreClasificacion" twoWay="true"/>-->
	<s:Group width="100%" height="100%">
		<s:VGroup width="100%" height="100%" paddingBottom="30">
			<s:HGroup gap="15" width="100%" height="40%">
				<!--<components:CustomPanelSpark skinClass="assets.skins.CustomPanelBlancoSkin" title="{dgClasificacion.selectedIndex > -1 ? 'Actualizar Id: ' + clasificacionVO.idClasificacion : 'Nuevo'}" width="40%"  height="220">
					<s:Form defaultButton="{btnEnviar}" width="100%">
						<s:FormItem label="Nombre" width="100%" height="30">
							<s:TextInput id="txtNombre" height="30" width="150"/>
						</s:FormItem>
						<s:FormItem width="100%" height="30">
							<s:Button id="btnEnviar" label="{clasificacionVO.idClasificacion == 0 ? 'Crear' : 'Actualizar'}" click="fnOperarClasificacion(event)" skinClass="assets.skins.CustomButtonEnviar" width="150" height="30"/>	
						</s:FormItem>
						<s:FormItem width="100%" height="30">
							<s:Button id="btnNuevo" label="Nueva Clasificación" click="fnNuevaClasificacion(event)" skinClass="assets.skins.CustomButtonTransparenteSkin" width="150" height="30"/>	
						</s:FormItem>
						<s:FormItem width="100%" height="30">
							<s:Button id="btnEliminar" label="Eliminar" click="fnOperarClasificacion(event)" skinClass="assets.skins.CustomButtonTransparenteSkin" width="150" height="30"/>	
						</s:FormItem>
					</s:Form>	
				</components:CustomPanelSpark>-->
				
				<components:CustomPanelSpark id="cpClasificacion" title="Clasificación" width="100%"  height="100%">
					<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="5">
						<s:HGroup width="100%">
							<s:Button id="btnCrearClasificacion" label="Crear" click="fnPopTipificacion(event)" width="100%"/>
							<s:Button label="Eliminar" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Modificar" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Agregar Categoría" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							
						</s:HGroup>
						<s:DataGrid id="dgClasificacion" dataProvider="{modelApp.arrClasificacion}" gridClick="fnBuscarAsociados(event)" width="100%" height="100%">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="idClasificacion" headerText="Id"/>
									<s:GridColumn dataField="NombreClasificacion" headerText="Nombre"/>	
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:VGroup> 	
				</components:CustomPanelSpark>
				<components:CustomPanelSpark id="cpAsociados" title="Categorias" width="100%">
					<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="5">
						<s:HGroup width="100%">
							<s:Button id="btnCrearCategoria" label="Crear" click="fnPopTipificacion(event)" width="100%"/>
							<s:Button label="Eliminar" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Modificar" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Agregar Subcategoría" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							
						</s:HGroup>
						<s:DataGrid id="lstCategorias" dataProvider="{dgClasificacion.selectedItem.arrAsociadosIn}" width="100%" height="100%" gridClick="fnBuscarAsociados(event)">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="obj.NombreCategoria" headerText="Nombre"/>
									<s:GridColumn dataField="sel" rendererIsEditable="true" headerText="Sel" itemRenderer="components.RenderSel" width="30"/>	
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
						
						
						
					</s:VGroup>
				</components:CustomPanelSpark>	
			</s:HGroup>
			<s:HGroup gap="15" width="100%" height="40%">
				<components:CustomPanelSpark title="Subcategorias" width="100%"  height="100%">
					<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="5">
						<s:HGroup width="100%">
							<s:Button id="btnCrearSubCategoria" label="Crear" click="fnPopTipificacion(event)" width="100%"/>
							<s:Button label="Eliminar" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Modificar" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Agregar Problema" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							
						</s:HGroup>
						
						<s:DataGrid id="dgSubCategorias" dataProvider="{lstCategorias.selectedItem.obj.arrAsociadosIn}" gridClick="fnBuscarAsociados(event)" width="100%" height="100%">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="obj.idSubCategoria" headerText="Id"/>
									<s:GridColumn dataField="obj.nombreSubCategoria" headerText="Nombre"/>	
									<s:GridColumn dataField="sel" rendererIsEditable="true" headerText="Sel" itemRenderer="components.RenderSel" width="30"/>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:VGroup> 	
				</components:CustomPanelSpark>
				<components:CustomPanelSpark title="Problemas" width="100%">
					<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="5">
						<s:HGroup width="75%">
							<s:Button id="btnCrearProblemas" label="Crear" click="fnPopTipificacion(event)" width="100%"/>
							<s:Button label="Eliminar" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							<s:Button label="Modificar" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
						</s:HGroup>
						
						<s:HGroup width="100%">
							<s:Button label="Agregar Categorias" click="fnPopCategorias(event)" width="100%"/>
							<s:Button label="Eliminar no seleccionadas" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
							
						</s:HGroup>
						<s:DataGrid id="lstProblemas" dataProvider="{dgSubCategorias.selectedItem.obj.arrAsociadosIn}" width="100%" height="100%">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="obj.NombreCategoria" headerText="Nombre"/>
									<s:GridColumn dataField="sel" rendererIsEditable="true" headerText="Sel" itemRenderer="components.RenderSel" width="30"/>	
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
						
						
						
					</s:VGroup>
				</components:CustomPanelSpark>	
			</s:HGroup>
		</s:VGroup>	
	</s:Group>	
	
	
</s:Scroller>
