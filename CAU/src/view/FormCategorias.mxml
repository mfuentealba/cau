<?xml version="1.0" encoding="utf-8"?>
<s:Scroller xmlns:fx="http://ns.adobe.com/mxml/2009"
			xmlns:s="library://ns.adobe.com/flex/spark"
			xmlns:mx="library://ns.adobe.com/flex/mx"
			xmlns:components="components.*">


	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import components.PopupCategorias;
			import components.PopupSubCategorias;
			
			import controller.Controller;
			
			import event.MantenedoresEvent;
			
			import model.ModelApp;
			
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			
			import spark.events.GridEvent;
			
			import vo.CategoriaVO;
			[Bindable] private var modelApp:ModelApp = ModelApp.getInstance();
			[Bindable] private var categoriaVO:CategoriaVO = new CategoriaVO();
			protected function fnBuscarCategoriasAsociadas(evento:GridEvent):void
			{
				// TODO Auto-generated method stub
				if(evento.rowIndex > -1){
					var manEvent:MantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.BUSCA_CATEGORIAS_ASOCIADAS, fnActualizaData, dgCategoria.selectedItem);
					Controller.getInstance().dispatchEvent(manEvent);
					
				}
				
			}
			
			
			private function fnActualizaGrilla(item:*):void{
				var auxCategoria:CategoriaVO = dgCategoria.selectedItem as CategoriaVO;
				auxCategoria.NombreCategoria = item.NombreCategoria;
			}
			
			private function fnActualizaData(auxCategoriaVO:CategoriaVO):void{				
				categoriaVO.idCategoria = auxCategoriaVO.idCategoria; 
				categoriaVO.NombreCategoria = auxCategoriaVO.NombreCategoria;
				categoriaVO.arrSubCategoriasIn = auxCategoriaVO.arrSubCategoriasIn;
				categoriaVO.arrSubCategoriasOut = auxCategoriaVO.arrSubCategoriasOut;
				auxCategoriaVO.arrSubCategoriasIn.refresh();
				auxCategoriaVO.arrSubCategoriasOut.refresh();
			}
			
			protected function fnPopCategorias(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var pop:PopupSubCategorias = new PopupCategorias();
				pop.categoriaVO = CategoriaVO(dgCategoria.selectedItem);
				pop.fnActualizaData = fnActualizaData;
				PopUpManager.addPopUp(pop, this.parentApplication as CAU, true);
				PopUpManager.centerPopUp(pop);
			}
			
			protected function fnEliminarNoSeleccionadas(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var arr:Array = [];
				for each(var obj:Object in categoriaVO.arrSubCategoriasIn){
					if(obj.sel == false){
						arr.push(obj['obj']['idSubCategoria']);	
					}
					
				}
				
				var manEvent:MantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.ELIMINAR_CATEGORIA_SUBCATEGORIA, fnActualizaData, [dgCategoria.selectedItem, arr]);
				Controller.getInstance().dispatchEvent(manEvent);	
			}
			
			protected function fnNuevaCategoria(event:*):void
			{
				// TODO Auto-generated method stub				
				CategoriaVO = new CategoriaVO();
				dgCategoria.selectedItem = null;
				modelApp.arrCategoria.refresh();
				btnEnviar.label = 'Crear';
			}
			
			/*private function set fnIdClas(val:int):void{
				idLbl.text = val + '';	
			}*/
			
			
			protected function fnOperarCategoria(evento:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var mantenedoresEvent:MantenedoresEvent;
				switch(evento.target){
					case btnEnviar:
						if(btnEnviar.label == 'Crear'){
							
							mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.CREAR_CATEGORIA, fnNuevaCategoria, [CategoriaVO, modelApp.arrCategoria]);						
						} else {
							mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.MODIFICAR_CATEGORIA, fnActualizaGrilla, [CategoriaVO, modelApp.arrCategoria]);
						}
						
						break;
					case btnEliminar:
						mantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.ELIMINAR_CATEGORIA, fnRemueveGrilla, [dgCategoria.selectedItem, modelApp.arrCategoria]);
						
						break;
				}
				
				Controller.getInstance().dispatchEvent(mantenedoresEvent);
			}	
			
			private function fnRemueveGrilla(id:String):void{
				var auxCategoriaVO:CategoriaVO = dgCategoria.selectedItem as CategoriaVO;
				auxCategoriaVO.arrSubCategoriasIn = null;
				auxCategoriaVO.arrSubCategoriasOut = null;
				modelApp.arrCategoria.removeItemAt(modelApp.arrCategoria.getItemIndex(auxCategoriaVO));
				fnNuevaCategoria(null);
			}
			
		]]>
	</fx:Script>
	<!--<fx:Binding source="CategoriaVO.idCategoria" destination="fnIdClas"/>-->
	<fx:Binding source="txtNombre.text" destination="CategoriaVO.NombreCategoria" twoWay="true"/>
	<s:Group width="100%" height="100%">
		<s:VGroup width="100%" height="100%" paddingBottom="50">
			<s:HGroup gap="15" width="100%" height="40%">
				<components:CustomPanelSpark skinClass="assets.skins.CustomPanelBlancoSkin" title="{dgCategoria.selectedIndex > -1 ? 'Actualizar Id: ' + CategoriaVO.idCategoria : 'Nuevo'}" width="40%"  height="220">
					<s:Form defaultButton="{btnEnviar}" width="100%">
						<!--<s:FormItem label="Id" width="100%" height="30">
						<s:Label id="idLbl" />
						</s:FormItem>-->
						<s:FormItem label="Nombre" width="100%" height="30">
							<s:TextInput id="txtNombre" height="30" width="150"/>
						</s:FormItem>
						<s:FormItem width="100%" height="30">
							<s:Button id="btnEnviar" label="{CategoriaVO.idCategoria == 0 ? 'Crear' : 'Actualizar'}" click="fnOperarCategoria(event)" skinClass="assets.skins.CustomButtonEnviar" width="150" height="30"/>	
						</s:FormItem>
						<s:FormItem width="100%" height="30">
							<s:Button id="btnNuevo" label="Nueva ClasificaciÃ³n" click="fnNuevaCategoria(event)" skinClass="assets.skins.CustomButtonTransparenteSkin" width="150" height="30"/>	
						</s:FormItem>
						<s:FormItem width="100%" height="30">
							<s:Button id="btnEliminar" label="Eliminar" click="fnOperarCategoria(event)" skinClass="assets.skins.CustomButtonTransparenteSkin" width="150" height="30"/>	
						</s:FormItem>
					</s:Form>	
				</components:CustomPanelSpark>
				
				<components:CustomPanelSpark title="Existentes" width="100%"  height="100%">
					<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="5">						
						<s:DataGrid id="dgCategoria" dataProvider="{modelApp.arrCategoria}" gridClick="fnBuscarCategoriasAsociadas(event)" width="100%" height="100%">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="idCategoria" headerText="Id"/>
									<s:GridColumn dataField="NombreCategoria" headerText="Nombre"/>	
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:VGroup> 	
				</components:CustomPanelSpark>
				
			</s:HGroup>
			<components:CustomPanelSpark id="cpAsociados" title="Categorias Asociadas" width="100%">
				<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" gap="5">
					<s:HGroup width="50%">
						<s:Button label="Agregar Categorias" click="fnPopCategorias(event)" width="100%"/>
						<s:Button label="Eliminar no seleccionadas" click="fnEliminarNoSeleccionadas(event)" skinClass="assets.skins.ButtonCleanLVSkin" width="100%"/>
						
					</s:HGroup>
					<s:DataGrid id="lstCategorias" dataProvider="{dgCategoria.selectedItem.arrCategoriasIn}" width="100%" height="100%">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="obj.NombreCategoria" headerText="Nombre"/>
								<s:GridColumn dataField="sel" rendererIsEditable="true" headerText="Sel" itemRenderer="components.RenderSel" width="30"/>	
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
					
					
					
				</s:VGroup>
			</components:CustomPanelSpark>
		</s:VGroup>	
	</s:Group>	
	
	
</s:Scroller>
