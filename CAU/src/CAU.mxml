<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="view.*" creationComplete="iniciaRO(event)"
					   backgroundAlpha="0" width="100%" height="100%" backgroundColor="0x000000" xmlns:components="components.*">
	<fx:Script>
		<![CDATA[
			import controller.Controller;
			
			import event.ClienteEvent;
			import event.MantenedoresEvent;
			import event.SucursalEvent;
			import event.UsuarioEvent;
			
			import model.ModelApp;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.effects.Resize;
			
			import vo.ClienteVO;
			import vo.GrupoResolutorVO;
			import vo.SucursalVO;
			import vo.UserVO;
			
			[Bindable] private var modelApp:ModelApp = ModelApp.getInstance();
			private var arrElementos:ArrayCollection = new ArrayCollection();
			
			protected function rmtObj_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function iniciaRO(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
				var obj1:Object = {id: 1, valor: "Nivel 1"};
				var obj2:Object = {id: 2, valor: "Nivel 2"};
				var obj3:Object = {id: 3, valor: "Nivel 3"};
				
				
				modelApp.arrTipoUsuario = new ArrayCollection([obj1, obj2, obj3]);
				
				modelApp.objTipoUsuario = {'1': obj1, '2': obj2, '3': obj3};
				
				
				/*modelApp.rmtObjSucursales = rmtObjSucursales;
				modelApp.rmtObjClientes = rmtObjClientes;
				modelApp.rmtObjUsuarios = rmtObjUsuarios;*/
				
				var sucursalEvent:SucursalEvent = new SucursalEvent(SucursalEvent.LISTAR);
				sucursalEvent.callback = fnListaClientes;
				Controller.getInstance().dispatchEvent(sucursalEvent);
				modelApp.fnSucursalesFilter = fnSucursalesFilter;
				
				var mantenedorEvent:MantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.LISTAR_PERFILES);
				//mantenedorEvent.callback = fnListaClientes;
				Controller.getInstance().dispatchEvent(mantenedorEvent);
				//modelApp.fnGrupoResolutorFilter = fnGrupoResolutorFilter;
				
				mantenedorEvent = new MantenedoresEvent(MantenedoresEvent.LISTAR_GRUPORESOLUTOR);				
				Controller.getInstance().dispatchEvent(mantenedorEvent);
				
				mantenedorEvent = new MantenedoresEvent(MantenedoresEvent.LISTAR_CLASIFICACION);				
				Controller.getInstance().dispatchEvent(mantenedorEvent);
				
				mantenedorEvent = new MantenedoresEvent(MantenedoresEvent.LISTAR_CATEGORIAS);				
				Controller.getInstance().dispatchEvent(mantenedorEvent);
				
				mantenedorEvent = new MantenedoresEvent(MantenedoresEvent.LISTAR_SUBCATEGORIAS);				
				Controller.getInstance().dispatchEvent(mantenedorEvent);
				
				mantenedorEvent = new MantenedoresEvent(MantenedoresEvent.LISTAR_DESCRIPCION);				
				Controller.getInstance().dispatchEvent(mantenedorEvent);
				
				
				
				
				
				var usuarioEvent:UsuarioEvent = new UsuarioEvent(UsuarioEvent.LISTAR);
				//usuarioEvent.callback = fnLista;
				Controller.getInstance().dispatchEvent(usuarioEvent);
				modelApp.fnSucursalesFilter = fnSucursalesFilter;
				
				
				var clienteEvent:ClienteEvent = new ClienteEvent(ClienteEvent.LISTAR);
				clienteEvent.callback = fnListaClientes;
				Controller.getInstance().dispatchEvent(clienteEvent);
				modelApp.fnSucursalesFilter = fnSucursalesFilter;
				
				
				/*
				var mantenedor2Event:MantenedoresEvent = new MantenedoresEvent(MantenedoresEvent.LISTAR_GRUPORESOLUTOR);				
				Controller.getInstance().dispatchEvent(mantenedor2Event);*/
				
				
			}
			
			private function fnListaClientes():void{
				var clienteEvent:ClienteEvent = new ClienteEvent(ClienteEvent.LISTAR);
				Controller.getInstance().dispatchEvent(clienteEvent);
				modelApp.fnClientesFilter = fnClientesFilter;
			}
			
			
			private function fnSucursalesFilter(item:SucursalVO):Boolean{
				return item.sucursal.toLowerCase().indexOf(modelApp.sucursalesFilter.toLocaleLowerCase()) > -1 ? true : false;
			}
			
			private function fnClientesFilter(item:ClienteVO):Boolean{
				return item.apellidos.toLowerCase().indexOf(modelApp.clientesFilter.toLocaleLowerCase()) || item.nombres.toLowerCase().indexOf(modelApp.clientesFilter.toLocaleLowerCase()) > -1 ? true : false;
			}
			
			private function fnUsuariosFilter(item:UserVO):Boolean{
				return item.username.toLowerCase().indexOf(modelApp.usuarioFilter.toLocaleLowerCase()) || item.nombre_completo.toLowerCase().indexOf(modelApp.usuarioFilter.toLocaleLowerCase()) > -1 ? true : false;
			}
			
			
			private function fnNavegar(evento:MouseEvent):void{
				switch(evento.target.label){
					case 'Usuarios':
						vsGeneral.selectedIndex = 0;
						break;
					case 'Clientes':
						vsGeneral.selectedIndex = 1;
						break;
					case 'Sucursales':
						vsGeneral.selectedIndex = 2;
						break;
					case 'Clasificación':
						vsGeneral.selectedIndex = 3;
						break;
					case 'Categorías':
						vsGeneral.selectedIndex = 4;
						break;
					case 'Subcategorías':
						vsGeneral.selectedIndex = 5;
						break;
					case 'Problemas':
						vsGeneral.selectedIndex = 6;
						break;
				}
				
				if(arrElementos.getItemIndex(evento.target) > -1){
					var objAux:* = arrElementos.removeItemAt(arrElementos.getItemIndex(evento.target));
				} else {
					objAux = arrElementos.removeItemAt(arrElementos.getItemIndex(evento.target.parentDocument));	
				}
				
				for each(var obj:* in arrElementos){
					if(obj is ListaAcordeon){
						obj.selected = 2;
					} else {
						obj.selected = false;	
					}
					
				} 
				arrElementos.addItem(objAux);
				
			}
			
			/*private function fnGrupoResolutorFilter(item:GrupoResolutorVO):Boolean{
				return item.nombreGrupoResolutor.toLowerCase().indexOf(modelApp.grupoResolutorFilter.toLocaleLowerCase()) > -1 || modelApp.grupoResolutorFilter == '' ? true : false;
			}*/
			
			/*protected function togglebutton1_clickHandler(evento:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(ToggleButton(evento.target).selected){
					var res:Resize = new Resize(tam);
					res.duration = 300;
					res.heightTo = vgContenedorTotal.height;
					res.play();
					rectCostado.width = 5;
					//rectCostado.height = vgContenedorTotal.height;
				} else {
					//res.reverse();
					res = new Resize(tam);
					res.duration = 300;
					res.heightTo = 50;
					res.play();
					rectCostado.width = 0;
				}
				
			}*/
			
			
			
			
			
			protected function fnArr(evento:FlexEvent):void
			{
				// TODO Auto-generated method stub
				for(var i:int = 0; i < vgbotones.numElements; i++){
					arrElementos.addItem(vgbotones.getElementAt(i));	
				}
				
			}
			
		]]>
	</fx:Script>
	<fx:Style source="./assets/css/style.css"/>
	<fx:Declarations>
		
		
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="0">
		<s:Group width="100%" height="50">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#000000"/>
				</s:fill>
			</s:Rect>
			<s:Label text="HelpDesk - Sistema de Gestión de Incidencias" fontSize="20" color="#ffffff" verticalCenter="0" horizontalCenter="0"/>
		</s:Group>
		<s:Group width="100%" height="2">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="#19aa8d"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		<s:Group width="100%" height="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<!--<s:BitmapFill source="@Embed(source='assets/imgs/skin-cloth.jpg')" fillMode="repeat"/>-->
					<s:SolidColor color="#f3f3f4"/>
				</s:fill>
			</s:Rect>
			
			<s:HGroup width="100%" height="100%">
				
				<s:VGroup gap="0" height="100%">
					<s:Group width="200" height="150">
						<s:Rect width="100%" height="100%">
							<s:fill>
								<!--<s:BitmapFill source="@Embed(source='assets/imgs/skin-cloth.jpg')" fillMode="repeat"/>-->
								<s:SolidColor color="#293846"/>
							</s:fill>
						</s:Rect>	
					</s:Group>
					
					<s:Group width="200" height="100%">
						<s:Rect width="100%" height="100%">
							<s:fill>
								<!--<s:BitmapFill source="@Embed(source='assets/imgs/skin-cloth.jpg')" fillMode="repeat"/>-->
								<s:SolidColor color="#2f4050"/>
							</s:fill>
						</s:Rect>
						<s:VGroup id="vgbotones" click="fnNavegar(event)" width="100%" gap="0" creationComplete="fnArr(event)">
							<components:ListaAcordeon label="Usuarios" img="assets/icons/usuarios.png"/>
							<components:ListaAcordeon label="Sucursales"/>
							<components:ListaAcordeon label="Clientes"/>
							<components:ListaAcordeon height="50" label="Tipificacion" id="lst" img="assets/icons/tipificacion.png" arrData="{[{icono: '', data: {label: 'Clasificación', accion: fnNavegar}}, {icono: '', data: {label: 'Categorías', accion: fnNavegar}}, {icono: '', data: {label: 'Subcategorías', accion: fnNavegar}}, {icono: '', data: {label: 'Problemas', accion: fnNavegar}}]}"/>
						</s:VGroup>
			
					</s:Group>
					
				</s:VGroup>
				<s:VGroup width="100%" height="100%">
					<s:Group width="100%" height="50">
						
					</s:Group>
					<mx:ViewStack id="vsGeneral" width="100%" height="100%">
						<s:NavigatorContent label="Usuarios">
							<view:FormUsuario width="100%" height="100%"/>		
						</s:NavigatorContent>
						<s:NavigatorContent label="Clientes">
							<view:FormCliente width="100%" height="100%"/>		
						</s:NavigatorContent>
						<s:NavigatorContent label="Sucursales">
							<view:FormSucursal width="100%" height="100%"/>		
						</s:NavigatorContent>
						<s:NavigatorContent>
							<view:FormClasificacion width="100%" height="100%"/>
						</s:NavigatorContent>
						<s:NavigatorContent>
							<view:FormClasificacion width="100%" height="100%"/>
						</s:NavigatorContent>
						<s:NavigatorContent>
							<view:FormClasificacion width="100%" height="100%"/>
						</s:NavigatorContent>
						<s:NavigatorContent>
							<view:FormClasificacion width="100%" height="100%"/>	
						</s:NavigatorContent>
					</mx:ViewStack>	
				</s:VGroup>
					
			</s:HGroup>
			
			
		</s:Group>	
	</s:VGroup>
	
	
</s:WindowedApplication>
