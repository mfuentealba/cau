<?xml version="1.0" encoding="utf-8"?>
<components:CustomPanelSpark xmlns:fx="http://ns.adobe.com/mxml/2009" 
							 xmlns:s="library://ns.adobe.com/flex/spark" 
							 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*" width="400" height="{160 + (ext ? 80 : 0) + (ext2 ? 180 : 0)}"
							 creationComplete="fnSeteo(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import controller.Controller;
			
			import event.MantenedoresEvent;
			
			import flash.net.dns.AAAARecord;
			
			import model.ModelApp;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.TextOperationEvent;
			
			import vo.ClasificacionVO;
			[Bindable] public var obj:Object;
			[Bindable] public var ext:Boolean;
			[Bindable] public var ext2:Boolean = true;
			[Bindable] public var opcion:String;
			[Bindable] public var idOpt:String;
			public var fnPost:Function;
			[Bindable] private var modelApp:ModelApp = ModelApp.getInstance();
			//[Bindable] public var arr:ArrayCollection;
			public var campo1:String;
			public var claseOperacion:Class;
			public var tipoEvento:String;
			
			
			public var objUpdate:*;
			[Bindable] public var arrUpdate:ArrayCollection;
			[Bindable] public var warning:Boolean;
			
			[Bindable] public var dgDataProvider:ArrayCollection;
			[Bindable] public var dgDataProvider2:ArrayCollection = new ArrayCollection();
			[Bindable] public var campoVisible:String;
			[Bindable] public var idCampoVisible:String;
			
			public var idClas:String;
			public var idCat:String;
			
			protected function fnOperar(evento:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var mantenedoresEvent:MantenedoresEvent;
				var factory:ClassFactory = new ClassFactory();
				factory.generator = claseOperacion;
				if(btnEnviar.label == 'Crear'){
					obj = factory.newInstance();
					obj[campo1] = txtNombre.text;
					if(ext){
						obj.idTiempoSolucion = ddlTiempoSolucion.selectedItem.idTiempoSolucion;
						obj.idFormaAtencion = 0//;ddlFormaAtencion.selectedItem.idFormaAtencion;
					}
					var arr:ArrayCollection = new ArrayCollection();
					for each(var obj2:Object in dgDataProvider2){
						if(obj2.sel == true){
							arr.addItem(obj2['obj'][idCampoVisible]);	
						}
						
					}
					var arrParam:Array = [obj];
					if(idClas){
						arrParam.push(idClas);
					}
					if(idCat){
						arrParam.push(idCat);
					}
					arrParam.push(arr);
					mantenedoresEvent = new MantenedoresEvent(tipoEvento, fnPost, arrParam);						
				} else {
					obj[campo1] = txtNombre.text;
					if(ext){
						obj['idFormaAtencion'] = 0;//ddlFormaAtencion.selectedItem.idFormaAtencion;
						obj['idTiempoSolucion'] = ddlTiempoSolucion.selectedItem.idTiempoSolucion;
					}
					mantenedoresEvent = new MantenedoresEvent(tipoEvento, fnPost, [obj, arr]);
				}
				Controller.getInstance().dispatchEvent(mantenedoresEvent);
				fnCerrar();
			}
			
			protected function fnCerrar():void
			{
				// TODO Auto-generated method stub
				PopUpManager.removePopUp(this);
			}
			
			protected function fnSeteo(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				if(obj){
					this.title = 'Modificar';
					txtNombre.text = obj[campo1];
					if(ext){
						ddlFormaAtencion.selectedItem = modelApp.objFormaAtencion[obj.idFormaAtencion];
						ddlTiempoSolucion.selectedItem = modelApp.objTiempoSolucion[obj.idTiempoSolucion];
					}
				}
			}
			
			private function set fnArmaDataProvider(arr:ArrayCollection):void{
				if(arr){
					
					for each(var obj:* in dgDataProvider){
						if(obj.asociada == 'S'){
							dgDataProvider2.addItem({obj: obj, sel: false});	
						}
						
					}
				}
			}
			
			protected function dg_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				var g:GridColumn = new GridColumn();
				g.headerText = 'ID';
				g.dataField = 'obj.' + idCampoVisible;
				arList.addItem(g);
				g = new GridColumn();
				g.headerText = 'Nombre';
				g.dataField = 'obj.' + campoVisible;
				arList.addItem(g);
				g = new GridColumn();
				g.headerText = 'Sel';
				g.dataField = 'sel';
				g.rendererIsEditable = true;
				var productRenderer:ClassFactory = new ClassFactory(components.RenderSel);

				g.itemRenderer = productRenderer;
				arList.addItem(g);
			}
			
			
			private function fnSeleccion(evento:MouseEvent):void{
				evento.stopImmediatePropagation();
				evento.stopPropagation();
				var opt:Boolean = evento.target.selected;
					var n:int = dgDataProvider2.length;
					var arr:ArrayCollection = dgDataProvider2;
					for(var i:int = 0; i< n; i++){
						var obj:* = arr.getItemAt(i);
						obj.sel = opt;
						arr.setItemAt(obj, i);
					}
			}
			
			
			private function filter(item:*):Boolean{
				return txtNombre.text == item[campo1] && (obj == null || obj[campo1] != item[campo1]) ? true : false;
			}
			
			private function set fnArmaUpdate(val:ArrayCollection):void{
				if(val){
					arrUpdate.filterFunction = filter;
					arrUpdate.refresh();
				}
				
			}
			
			protected function txtNombre_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				arrUpdate.refresh();
				warning = arrUpdate.length > 0 ? true : false; 
			}
			
		]]>
	</fx:Script>
	<fx:Binding source="dgDataProvider" destination="fnArmaDataProvider"/>
	<fx:Binding source="arrUpdate" destination="fnArmaUpdate"/>
	<s:VGroup horizontalCenter="0">
		<s:Form defaultButton="{btnEnviar}" width="100%">
			<s:FormItem label="Nombre" width="100%" height="50"> 
				<s:TextInput id="txtNombre" height="30" width="150" change="txtNombre_changeHandler(event)"/>
				<s:Label id="lblRepetido" text="Nombre ya existe" visible="{warning}" includeInLayout="{warning}" fontSize="8" color="RED"/>
			</s:FormItem>
			<s:FormItem label="Forma de atención" visible="false" includeInLayout="false" width="100%" height="30">
				<s:DropDownList id="ddlFormaAtencion" height="30" width="150" dataProvider="{modelApp.arrFormaAtencion}" labelField="descripcion"/>
			</s:FormItem>
			<s:FormItem label="Tiempo de solución" width="100%" height="30" visible="{ext}" includeInLayout="{ext}">
				<s:DropDownList id="ddlTiempoSolucion" height="30" width="150" dataProvider="{modelApp.arrTiempoSolucion}" labelField="descripcion"/>
			</s:FormItem>
			
			
			
		</s:Form>
		<s:VGroup width="100%" includeInLayout="{ext2}" visible="{ext2}">
			<s:Label text="Incluir en:"/>
			<components:CustomDataGridSpark id="dg" fnEncabezado="fnSeleccion" arrSelectorTodo="{['Sel']}" dataProvider="{dgDataProvider2}" width="100%" height="150" creationComplete="dg_creationCompleteHandler(event)">
				<components:columns>
					<s:ArrayList id="arList">
					</s:ArrayList>
				</components:columns>				
			</components:CustomDataGridSpark>	
		</s:VGroup>
		
		
		<s:HGroup>
			<s:Button id="btnEnviar" label="{obj == null ? 'Crear' : 'Actualizar'}" click="fnOperar(event)" skinClass="assets.skins.CustomButtonEnviar" width="150" height="30" enabled="{txtNombre.text != '' &amp;&amp; !warning ? (ext ? (ddlTiempoSolucion.selectedItem ? true : false) : true) : false}"/>	
			<s:Button id="btnEliminar" label="Cancelar" click="fnCerrar()" skinClass="assets.skins.CustomButtonTransparenteSkin" width="150" height="30"/>
		</s:HGroup>	
	</s:VGroup>
	
</components:CustomPanelSpark>
