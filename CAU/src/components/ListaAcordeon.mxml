<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 verticalScrollPolicy="off" horizontalScrollPolicy="off"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="50" xmlns:components="components.*" creationComplete="fnDefineContenedor(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.effects.Parallel;
			import mx.effects.Sequence;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
			import spark.effects.Resize;
			
			[Bindable] public var arrData:Array;
			[Bindable] public var img:String; 
			[Bindable] public var label2:String;
			[Bindable] public var selected:int;
			[Bindable] public var arrElementos:ArrayCollection = new ArrayCollection();
			[Bindable] public var defaultSelected:int = 0;
			
			protected function fnDespliegue():void
			{
				// TODO Auto-generated method stub
				var sec:Parallel = new Parallel();
				if(btnDespliegue.selected){
					if(this.parentDocument is ListaAcordeon){
						this.height = vgContenedorTotal.height;
						rectCostado.width = 5;
						//this.parentDocument.height += vgContenedor.height;
						var res2:Resize = new Resize(this.parentDocument);
						res2.duration = 300;
						res2.heightTo = this.parentDocument.height + vgContenedor.height;
						//sec.addChild(res2);
						res2.play();
						
						
					} else {
						var res:Resize = new Resize(this);
						res.duration = 300;
						res.heightTo = vgContenedorTotal.height;
						res.play();
						rectCostado.width = 5;
						/*sec.addChild(res);
						sec.play();*/	
						if(selected != 1){
							selected = 1;	
						}	
					}
					
					this.arrElementos[defaultSelected].selected = 1;//dispatchEvent(new MouseEvent(MouseEvent.CLICK));
					
					
					//rectCostado.height = vgContenedorTotal.height;
				} else {
					//res.reverse();
					if(this.parentDocument is ListaAcordeon){
						if(this.height != btnDespliegue.height){							
							//this.height = vgContenedor.height;
							res2 = new Resize(this.parentDocument);
							res2.duration = 300;
							res2.heightTo = this.parentDocument.height - vgContenedor.height;
							res2.addEventListener(EffectEvent.EFFECT_END, function(evento:EffectEvent):void{
								this.height = vgContenedor.height;
								rectCostado.width = 0;
							});
							res2.play();
						}
						
					} else {
						res = new Resize(this);
						res.duration = 300;
						res.heightTo = 50;
						res.play();
						rectCostado.width = 0;
						if(selected != 2){
							selected = 2;	
						}
						for each(var obj:* in arrElementos){
							if(obj is ListaAcordeon){
								obj.selected = 2;
							} else {
								obj.selected = false;	
							}
							
						} 
					}
				}
			}
			
			public function crearHijos():void{
				if(arrData){
					vgContenedor.removeAllElements();
					for each(var obj:* in arrData){
						if(obj['data'].hasOwnProperty('label')){
							var cusbtn:CustomToggleButtonLista = new CustomToggleButtonLista();
							cusbtn.label = obj['data'].label;
							cusbtn.addEventListener(MouseEvent.CLICK, obj['data']['accion']); 
							vgContenedor.addElement(cusbtn);
							cusbtn.percentWidth = 100;
							arrElementos.addItem(cusbtn);
						} else {
							var list:ListaAcordeon = new ListaAcordeon();
							vgContenedor.addElement(list);
							list.arrData = obj['data'];
							list.img = obj['img'];
							list.label = obj['label'];
							list.percentWidth = 100;
							arrElementos.addItem(list);
						}
					}	
				}
				
				
			}
			
			protected function fnReestablecerBotones(evento:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
				/*evento.stopImmediatePropagation();
				evento.stopPropagation();*/
				
				var index:int = arrElementos.getItemIndex(evento.target);
				if(arrElementos.getItemIndex(evento.target) > -1){
					var objAux:* = arrElementos.removeItemAt(index);
				} else {
					objAux = arrElementos.removeItemAt(arrElementos.getItemIndex(evento.target.parentDocument));	
				}
				
				for each(var obj:* in arrElementos){
					if(obj is ListaAcordeon){
						obj.selected = 2;
					} else {
						obj.selected = false;	
					}
					
				} 
				
				if(objAux is ListaAcordeon){
					obj.selected = 1;
				} else {
					objAux.selected = true;	
				}
				arrElementos.addItemAt(objAux, index);
				
				
			}
			
			
			/*private function set fnRedimencionar(val:Number):void{
				if(this.parentDocument is ListaAcordeon){
					this.parentDocument.fnDespliegue(null);
				}
				
			}*/
			
			
			private function set fnActivar(val:int):void{
				if(val != 0){
					btnDespliegue.selected = val == 1 ? true : false;
					fnDespliegue();	
				}
				
			}
			
			protected function btnDespliegue_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				btnDespliegue.selected = true;
				this.arrElementos[defaultSelected].selected = 1;
				DisplayObject(this.arrElementos[defaultSelected]).dispatchEvent(new MouseEvent(MouseEvent.CLICK));
				/*if(btnDespliegue.selected){
					if(selected == 1){
						if(this.arrElementos[defaultSelected].selected == 0){
							DisplayObject(this.arrElementos[defaultSelected]).dispatchEvent(new MouseEvent(MouseEvent.CLICK));
						}
						
					} else {
						selected = 1;	
					}
					
				} else {
					selected = 2;
				}*/
				
			}
			
			protected function fnDefineContenedor(evento:FlexEvent):void
			{
				// TODO Auto-generated method stub
				if(evento.target.parentDocument is ListaAcordeon){
					btnDespliegue.colorFondo.color = 0x293846;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<!--<fx:Binding source="arrData" destination="crearHijos"/>-->
	<!--<fx:Binding source="height" destination="fnRedimencionar"/>-->
	<fx:Binding source="selected" destination="fnActivar"/>
	<!--<s:layout>
		<s:HorizontalLayout gap="0"/>
	</s:layout>-->
	<s:HGroup gap="0" width="100%">
		<s:Rect width="0" height="100%" id="rectCostado">
			<s:fill>
				<!--<s:BitmapFill source="@Embed(source='assets/imgs/skin-cloth.jpg')" fillMode="repeat"/>-->
				<s:SolidColor color="#19aa8d"/>
			</s:fill>
		</s:Rect>
		<!--<components:CustomToggleButtonLista icon="@Embed(source='assets/icons/tipificacion.png')" width="50" height="50" skinClass="assets.skins.CustomToggleButtonListadoSkin"/>-->
		<s:VGroup gap="0" width="100%" id="vgContenedorTotal">
			<components:CustomToggleButtonLista label="{label}" img="{img}" click="btnDespliegue_clickHandler(event)" skinClass="assets.skins.CustomToggleButtonEncabezadoSkin" id="btnDespliegue" width="100%" selected="{selected == 1? true : false}"/>
			<s:VGroup width="100%" id="vgContenedor" gap="0" click="fnReestablecerBotones(event)" creationComplete="crearHijos()">
				<!--<s:ToggleButton label="Prueba1" skinClass="assets.skins.CustomToggleButtonListadoSkin" width="100%"/>
				<s:ToggleButton label="Prueba2" skinClass="assets.skins.CustomToggleButtonListadoSkin" width="100%"/>
				<s:ToggleButton label="Prueba3" skinClass="assets.skins.CustomToggleButtonListadoSkin" width="100%"/>
				<s:ToggleButton label="Prueba4" skinClass="assets.skins.CustomToggleButtonListadoSkin" width="100%"/>-->
			</s:VGroup>	
		</s:VGroup>	
	</s:HGroup>
	
</mx:Canvas>
